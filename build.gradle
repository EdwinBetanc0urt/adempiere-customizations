plugins {
	id "java"
	id "java-library"
	id "maven-publish"
	id "signing"
	id "io.github.uoxx3.project-environment" version "1.0.1"
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	// targetCompatibility = JavaVersion.VERSION_17
	withJavadocJar()
	withSourcesJar()
}

allprojects {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

ext {
	baseVersion = "3.9.4.001"
	baseGroupId = "io.github.adempiere"

	// project property, system property, .env project file, system enviroment variable

	// CUSTOMIZABLE DOWNLOAD REPOSITORY PACKAGES
	customRepositoryUrl = findProperty("deployRepository") ?: System.properties['deploy.repository'] ?:
		projectEnv.get("GITHUB_DEPLOY_REPOSITORY", null) ?: System.getenv("GITHUB_DEPLOY_REPOSITORY") ?:
		"https://maven.pkg.github.com/adempiere/adempiere-customizations"

	customRepositoryUserName = findProperty("deployUsername") ?: System.properties['deploy.user'] ?:
		projectEnv.get("GITHUB_DEPLOY_USER", null) ?: System.getenv("GITHUB_DEPLOY_USER")

	customRepositoryToken = findProperty("deployToken") ?: System.properties['deploy.token'] ?:
		projectEnv.get("GITHUB_DEPLOY_TOKEN", null) ?: System.getenv("GITHUB_DEPLOY_TOKEN")


	// PUBLISH REPOSITORY PACKAGES
	patchPublishUrl = findProperty("deployPublishUrl") ?: System.properties['deploy.publish_url'] ?:
		projectEnv.get("GITHUB_DEPLOY_URL", null) ?: System.getenv("GITHUB_DEPLOY_URL") ?:
		"https://maven.pkg.github.com/adempiere/adempiere-customizations"

	patchPublishUserName = findProperty("deployUsername") ?: System.properties['deploy.user'] ?:
		projectEnv.get("GITHUB_DEPLOY_USER", null) ?: System.getenv("GITHUB_DEPLOY_USER")

	patchPublishToken = findProperty("deployToken") ?: System.properties['deploy.token'] ?:
		projectEnv.get("GITHUB_DEPLOY_TOKEN", null) ?: System.getenv("GITHUB_DEPLOY_TOKEN")

	patchPublishVersion = findProperty("deployVersion") ?: System.properties['deploy.version'] ?:
		projectEnv.get("GITHUB_DEPLOY_VERSION", null) ?: System.getenv("ADEMPIERE_LIBRARY_VERSION") ?:
		"local-1.0.0"

	patchPublishGroupId = findProperty("deployGroup") ?: System.properties['deploy.group'] ?:
		projectEnv.get("GITHUB_DEPLOY_GROUP", null) ?: System.getenv("ADEMPIERE_LIBRARY_GROUP") ?:
		"io.github.adempiere"
}

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		// Custom GitHub Repository (ADempiere-Customizations by Default)
		url = customRepositoryUrl
		credentials {
			// project property, system property, .env project file, system enviroment variable
			username = customRepositoryUserName
			password = customRepositoryToken
		}
	}
	maven {
		// ADempiere organization maven github registry
		url = "https://maven.pkg.github.com/adempiere/adempiere"
		credentials {
			// project property, system property, .env project file, system enviroment variable
			username = findProperty("deployUsername") ?: System.properties['deploy.user'] ?:
				projectEnv.get("GITHUB_DEPLOY_USER", null) ?: System.getenv("GITHUB_DEPLOY_USER")
			password = findProperty("deployToken") ?: System.properties['deploy.token'] ?:
				projectEnv.get("GITHUB_DEPLOY_TOKEN", null) ?: System.getenv("GITHUB_DEPLOY_TOKEN")
		}
	}
}

dependencies {
    api fileTree(
        dir: 'lib',
        include: [
            '*.jar'
        ]
    )

   	//	Patches Libraries
    api project(':adempiere-customizations.base')
   	// api project(':adempiere-customizations.adempiere.test')
   	// api project(':adempiere-customizations.asset')
   	// api project(':adempiere-customizations.cashflow')
   	// api project(':adempiere-customizations.crm')
   	// api project(':adempiere-customizations.discord-notifier')
   	// api project(':adempiere-customizations.distribution')
   	// api project(':adempiere-customizations.extend')
   	// api project(':adempiere-customizations.freight')
   	// api project(':adempiere-customizations.human-resource-and-payroll')
   	// api project(':adempiere-customizations.investment-and-loan')
   	// api project(':adempiere-customizations.jasperreports')
   	// api project(':adempiere-customizations.loan')
   	// api project(':adempiere-customizations.manufacturing')
   	// api project(':adempiere-customizations.migration')
   	// api project(':adempiere-customizations.openid-authentication')
   	// api project(':adempiere-customizations.point-of-sales')
   	// api project(':adempiere-customizations.production')
   	// api project(':adempiere-customizations.project')
   	// api project(':adempiere-customizations.request')
   	// api project(':adempiere-customizations.store')
   	// api project(':adempiere-customizations.telegram-notifier')
   	// api project(':adempiere-customizations.time-and-attendance')
   	// api project(':adempiere-customizations.tools')
   	// api project(':adempiere-customizations.wms')
}


jar {
	manifest {
		attributes(
			"Implementation-Title": "ADempiere Patch",
			"Implementation-Version": patchPublishVersion
		)
	}
}

publishing {
    repositories {
		mavenLocal()

		maven {
			// Adempiere GitHub Organization by Default
			url = patchPublishUrl
			credentials {
				// project property, system property, .env project file, system enviroment variable
				username = patchPublishUserName
				password = patchPublishToken
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			groupId = patchPublishGroupId
			artifactId = 'adempiere-customizations'
			version = patchPublishVersion
			from components.java
			pom {
                name = 'Adempiere Patches'
                description = 'Project for Adempiere Patches'
                url = 'http://adempiere.io/'
                licenses {
                    license {
                        name = 'GNU General Public License, version 2'
                        url = 'https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yamelsenih'
                        name = 'Yamel Senih'
                        email = 'ysenih@erpya.com'
                    }
					developer {
						id = 'edwinbetanc0urt'
						name = 'Edwin Betancourt'
						email = 'EdwinBetanc0urt@outlook.com'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/adempiere/adempiere-customizations.git'
					developerConnection = 'scm:git:ssh://github.com/adempiere/adempiere-customizations.git'
					url = 'http://github.com/adempiere/adempiere-customizations'
				}
			}
		}
	}
}


task cleanBuildPublishLocal(type: GradleBuild) {
	tasks = ['clean', 'build', 'publishToMavenLocal']
}


signing {
	def isReleaseVersion = !patchPublishVersion.toString().startsWith("local") && !patchPublishVersion.toString().endsWith("-SNAPSHOT")

	sign configurations.archives

	setRequired {
		// signing is required if this is a release version and the artifacts are to be published
		// do not use hasTask() as this require realization of the tasks that maybe are not necessary
		(isReleaseVersion || patchPublishVersion.toString().equals("build")) && gradle.taskGraph.allTasks.any {
			it.equals(PublishToMavenRepository)
		}
	}
	def signingKey = findProperty("deploySigningKey")
	def signingPassword = findProperty("deploySigningPassword")
	useInMemoryPgpKeys(signingKey, signingPassword)
	sign publishing.publications.mavenJava
}
